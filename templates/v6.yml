stages:
  - build
  - test
  - post
  - deploy

cache:
  key: ${CI_JOB_NAME}
  paths:
    - downloads
    # package downloads
    - deps/usr/downloads
    # global downloads and artifacts
    - .julia/packages/**/deps/usr/downloads
    - .julia/artifacts
    # generic cache for package resources
    - .julia/cache
    # julia source build dependency cache
    - julia/deps/srccache
    - julia/deps/srccache/*.tar.gz

#
# Julia versions
#

.julia:1.0:
  before_script:
    - |
      apt-get -qq update
      DEBIAN_FRONTEND=noninteractive apt-get -qqy -o=Dpkg::Use-Pty=0 install wget $CI_APT_INSTALL
      wget -nv https://raw.githubusercontent.com/JuliaGPU/gitlab-ci/master/install_julia.sh
      eval "$(bash install_julia.sh 1.0)"

.julia:1.1:
  before_script:
    - |
      apt-get -qq update
      DEBIAN_FRONTEND=noninteractive apt-get -qqy -o=Dpkg::Use-Pty=0 install wget $CI_APT_INSTALL
      wget -nv https://raw.githubusercontent.com/JuliaGPU/gitlab-ci/master/install_julia.sh
      eval "$(bash install_julia.sh 1.1)"

.julia:1.2:
  before_script:
    - |
      apt-get -qq update
      DEBIAN_FRONTEND=noninteractive apt-get -qqy -o=Dpkg::Use-Pty=0 install wget $CI_APT_INSTALL
      wget -nv https://raw.githubusercontent.com/JuliaGPU/gitlab-ci/master/install_julia.sh
      eval "$(bash install_julia.sh 1.2)"

.julia:1.3:
  before_script:
    - |
      apt-get -qq update
      DEBIAN_FRONTEND=noninteractive apt-get -qqy -o=Dpkg::Use-Pty=0 install wget $CI_APT_INSTALL
      wget -nv https://raw.githubusercontent.com/JuliaGPU/gitlab-ci/master/install_julia.sh
      eval "$(bash install_julia.sh 1.3)"

.julia:1.4:
  before_script:
    - |
      apt-get -qq update
      DEBIAN_FRONTEND=noninteractive apt-get -qqy -o=Dpkg::Use-Pty=0 install wget $CI_APT_INSTALL
      wget -nv https://raw.githubusercontent.com/JuliaGPU/gitlab-ci/master/install_julia.sh
      eval "$(bash install_julia.sh 1.4)"

.julia:1.5:
  before_script:
    - |
      apt-get -qq update
      DEBIAN_FRONTEND=noninteractive apt-get -qqy -o=Dpkg::Use-Pty=0 install wget $CI_APT_INSTALL
      wget -nv https://raw.githubusercontent.com/JuliaGPU/gitlab-ci/master/install_julia.sh
      eval "$(bash install_julia.sh 1.5)"

.julia:nightly:
  before_script:
    - |
      apt-get -qq update
      DEBIAN_FRONTEND=noninteractive apt-get -qqy -o=Dpkg::Use-Pty=0 install wget $CI_APT_INSTALL
      wget -nv https://raw.githubusercontent.com/JuliaGPU/gitlab-ci/master/install_julia.sh
      eval "$(bash install_julia.sh nightly)"

.julia:source:
  before_script:
    - |
      apt-get -qq update
      DEBIAN_FRONTEND=noninteractive apt-get -qqy -o=Dpkg::Use-Pty=0 install wget $CI_APT_INSTALL
      wget -nv https://raw.githubusercontent.com/JuliaGPU/gitlab-ci/master/install_julia.sh
      eval "$(bash install_julia.sh source)"


#
# test
#

.test:
  stage: test
  script: |
    julia --project -e '
      using Pkg;
      Pkg.instantiate();
      Pkg.build();
      Pkg.test(; coverage=true);'
  interruptible: true
  after_script:
    - shopt -s globstar; for f in ./**/*.cov; do mv "$f" "${f%.cov}.$CI_JOB_ID.cov"; done
  artifacts:
    when: always
    paths:
      - deps/ext.jl
      - deps/deps.jl
      - deps/build.log
      # gitlab-runner#2620
      - ./*.cov
      - ./*/*.cov
      - ./*/*/*.cov
      - ./*/*/*/*.cov


#
# coverage
#

.coverage:
  stage: post
  script: |
    # Coverage(Tools).jl scans all .jl files but easily fails at that,
    # so make sure we exclude hidden directories (like the depot, .git, ...)
    julia -e '
      using Pkg
      Pkg.add("Coverage")
      using Coverage
      dirs = filter(entry -> isdir(entry) && !startswith(entry, "."), readdir())
      coverage = vcat(map(process_folder, dirs)...)
      Codecov.submit_local(coverage)'
  interruptible: true


#
# documentation
#

# NOTE: the recommended set-up is to develop the main package from the docs environment,
#       but that ignores the package's Manifest. instead, we instantiate and activate both
#       by setting the load path, giving priority to the main package Manifest.

.documentation:
  stage: post
  variables:
    DOCUMENTER_DEBUG: "true"
    JULIA_LOAD_PATH: "$CI_PROJECT_DIR:$CI_PROJECT_DIR/docs::"
  script: |
    apt-get -qqy install git
    julia --project -e 'using Pkg; Pkg.instantiate()'
    julia --project=docs -e 'using Pkg; Pkg.instantiate()'
    julia --project=docs docs/make.jl
  interruptible: true
  artifacts:
    paths:
      - docs/build
