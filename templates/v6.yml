stages:
  - build
  - test
  - post
  - deploy

cache:
  key: ${CI_JOB_NAME}
  paths:
    - downloads
    - deps/usr/downloads
    - julia/deps/srccache
    - .julia/packages/**/deps/usr/downloads
    - .julia/artifacts


#
# Julia versions
#

.julia:0.7:
  before_script:
    - apt-get -qq update
    - apt-get -qq -o=Dpkg::Use-Pty=0 -y install wget ${CI_APT_INSTALL}
    - >
      if [ "${CI_RUNNER_EXECUTABLE_ARCH}" == "linux/amd64" ]; then
        wget -nv -N -P downloads/ https://julialang-s3.julialang.org/bin/linux/x64/0.7/julia-0.7-latest-linux-x86_64.tar.gz
        FILENAME=julia-0.7-latest-linux-x86_64.tar.gz
      elif [ "${CI_RUNNER_EXECUTABLE_ARCH}" == "linux/arm64" ]; then
        wget -nv -N -P downloads/ https://julialang-s3.julialang.org/bin/linux/aarch64/0.7/julia-0.7-latest-linux-aarch64.aarch64.gz
        FILENAME=julia-0.7-latest-linux-aarch64.aarch64.gz
      else
        echo "Unsupported platform:" ${CI_RUNNER_EXECUTABLE_ARCH} >&2
      fi
    - tar -C /usr/local -x -z --strip-components=1 -f downloads/julia.tar.gz
    - julia -e 'using InteractiveUtils; versioninfo()'
    # https://gitlab.com/gitlab-org/gitlab-runner/issues/327
    # https://gitlab.com/gitlab-org/gitlab/issues/16343
    - export JULIA_DEPOT_PATH="$CI_PROJECT_DIR/.julia"

.julia:1.0:
  before_script:
    - apt-get -qq update
    - apt-get -qq -o=Dpkg::Use-Pty=0 -y install wget ${CI_APT_INSTALL}
    - >
      if [ "${CI_RUNNER_EXECUTABLE_ARCH}" == "linux/amd64" ]; then
        wget -nv -N -P downloads/ https://julialang-s3.julialang.org/bin/linux/x64/1.0/julia-1.0-latest-linux-x86_64.tar.gz
        FILENAME=julia-1.0-latest-linux-x86_64.tar.gz
      elif [ "${CI_RUNNER_EXECUTABLE_ARCH}" == "linux/arm64" ]; then
        wget -nv -N -P downloads/ https://julialang-s3.julialang.org/bin/linux/aarch64/1.0/julia-1.0-latest-linux-aarch64.tar.gz
        FILENAME=julia-1.0-latest-linux-aarch64.tar.gz
      else
        echo "Unsupported platform:" ${CI_RUNNER_EXECUTABLE_ARCH} >&2
      fi
    - tar -C /usr/local -x -z --strip-components=1 -f downloads/${FILENAME}
    - julia -e 'using InteractiveUtils; versioninfo()'
    # https://gitlab.com/gitlab-org/gitlab-runner/issues/327
    # https://gitlab.com/gitlab-org/gitlab/issues/16343
    - export JULIA_DEPOT_PATH="$CI_PROJECT_DIR/.julia"

.julia:1.1:
  before_script:
    - apt-get -qq update
    - apt-get -qq -o=Dpkg::Use-Pty=0 -y install wget ${CI_APT_INSTALL}
    - >
      if [ "${CI_RUNNER_EXECUTABLE_ARCH}" == "linux/amd64" ]; then
        wget -nv -N -P downloads/ https://julialang-s3.julialang.org/bin/linux/x64/1.1/julia-1.1-latest-linux-x86_64.tar.gz
        FILENAME=julia-1.1-latest-linux-x86_64.tar.gz
      elif [ "${CI_RUNNER_EXECUTABLE_ARCH}" == "linux/arm64" ]; then
        wget -nv -N -P downloads/ https://julialang-s3.julialang.org/bin/linux/aarch64/1.1/julia-1.1-latest-linux-aarch64.tar.gz
        FILENAME=julia-1.1-latest-linux-aarch64.tar.gz
      else
        echo "Unsupported platform:" ${CI_RUNNER_EXECUTABLE_ARCH} >&2
      fi
    - tar -C /usr/local -x -z --strip-components=1 -f downloads/${FILENAME}
    - julia -e 'using InteractiveUtils; versioninfo()'
    # https://gitlab.com/gitlab-org/gitlab-runner/issues/327
    # https://gitlab.com/gitlab-org/gitlab/issues/16343
    - export JULIA_DEPOT_PATH="$CI_PROJECT_DIR/.julia"

.julia:1.2:
  before_script:
    - apt-get -qq update
    - apt-get -qq -o=Dpkg::Use-Pty=0 -y install wget ${CI_APT_INSTALL}
    - >
      if [ "${CI_RUNNER_EXECUTABLE_ARCH}" == "linux/amd64" ]; then
        wget -nv -N -P downloads/ https://julialang-s3.julialang.org/bin/linux/x64/1.2/julia-1.2-latest-linux-x86_64.tar.gz
        FILENAME=julia-1.2-latest-linux-x86_64.tar.gz
      elif [ "${CI_RUNNER_EXECUTABLE_ARCH}" == "linux/arm64" ]; then
        wget -nv -N -P downloads/ https://julialang-s3.julialang.org/bin/linux/aarch64/1.2/julia-1.2-latest-linux-aarch64.tar.gz
        FILENAME=julia-1.2-latest-linux-aarch64.tar.gz
      else
        echo "Unsupported platform:" ${CI_RUNNER_EXECUTABLE_ARCH} >&2
      fi
    - tar -C /usr/local -x -z --strip-components=1 -f downloads/${FILENAME}
    - julia -e 'using InteractiveUtils; versioninfo()'
    # https://gitlab.com/gitlab-org/gitlab-runner/issues/327
    # https://gitlab.com/gitlab-org/gitlab/issues/16343
    - export JULIA_DEPOT_PATH="$CI_PROJECT_DIR/.julia"

.julia:1.3:
  before_script:
    - apt-get -qq update
    - apt-get -qq -o=Dpkg::Use-Pty=0 -y install wget ${CI_APT_INSTALL}
    - >
      if [ "${CI_RUNNER_EXECUTABLE_ARCH}" == "linux/amd64" ]; then
        wget -nv -N -P downloads/ https://julialang-s3.julialang.org/bin/linux/x64/1.3/julia-1.3-latest-linux-x86_64.tar.gz
        FILENAME=julia-1.3-latest-linux-x86_64.tar.gz
      elif [ "${CI_RUNNER_EXECUTABLE_ARCH}" == "linux/arm64" ]; then
        wget -nv -N -P downloads/ https://julialang-s3.julialang.org/bin/linux/aarch64/1.3/julia-1.3-latest-linux-aarch64.tar.gz
        FILENAME=julia-1.3-latest-linux-aarch64.tar.gz
      else
        echo "Unsupported platform:" ${CI_RUNNER_EXECUTABLE_ARCH} >&2
      fi
    - tar -C /usr/local -x -z --strip-components=1 -f downloads/${FILENAME}
    - julia -e 'using InteractiveUtils; versioninfo()'
    # https://gitlab.com/gitlab-org/gitlab-runner/issues/327
    # https://gitlab.com/gitlab-org/gitlab/issues/16343
    - export JULIA_DEPOT_PATH="$CI_PROJECT_DIR/.julia"

.julia:nightly:
  before_script:
    - apt-get -qq update
    - apt-get -qq -o=Dpkg::Use-Pty=0 -y install wget ${CI_APT_INSTALL}
    - >
      if [ "${CI_RUNNER_EXECUTABLE_ARCH}" == "linux/amd64" ]; then
        wget -nv -N -P downloads/ https://julialangnightlies-s3.julialang.org/bin/linux/x64/julia-latest-linux64.tar.gz
        FILENAME=julia-latest-linux64.tar.gz
      elif [ "${CI_RUNNER_EXECUTABLE_ARCH}" == "linux/arm64" ]; then
        wget -nv -N -P downloads/ https://julialangnightlies-s3.julialang.org/bin/linux/aarch64/julia-latest-linuxaarch64.tar.gz
        FILENAME=julia-latest-linuxaarch64.tar.gz
      else
        echo "Unsupported platform:" ${CI_RUNNER_EXECUTABLE_ARCH} >&2
      fi
    - tar -C /usr/local -x -z --strip-components=1 -f downloads/${FILENAME}
    - julia -e 'using InteractiveUtils; versioninfo()'
    # https://gitlab.com/gitlab-org/gitlab-runner/issues/327
    # https://gitlab.com/gitlab-org/gitlab/issues/16343
    - export JULIA_DEPOT_PATH="$CI_PROJECT_DIR/.julia"

.julia:source:
  before_script:
    - apt-get -qq update
    - apt-get -qq -o=Dpkg::Use-Pty=0 -y install git build-essential libatomic1 python gfortran perl wget m4 cmake pkg-config rsync
    # clone to a different folder because julia/deps/srccache might exist already
    - git clone $CI_CLONE_ARGS https://github.com/JuliaLang/julia julia.git
    - rsync -a julia.git/ julia/
    # build
    - make -C julia -j$(nproc) JULIA_PRECOMPILE=0 $CI_BUILD_ARGS
    - ln -s $(pwd)/julia/julia /usr/local/bin/julia
    - julia -e 'using InteractiveUtils; versioninfo()'
    # https://gitlab.com/gitlab-org/gitlab-runner/issues/327
    # https://gitlab.com/gitlab-org/gitlab/issues/16343
    - export JULIA_DEPOT_PATH="$CI_PROJECT_DIR/.julia"


#
# test
#

.test:
  stage: test
  script:
    - julia --project --color=yes -e 'using Pkg;
                                      Pkg.instantiate();
                                      Pkg.build();
                                      Pkg.test(; coverage=true);'
  after_script:
    - shopt -s globstar; for f in src/**/*.cov; do mv "$f" "${f%.cov}.$CI_JOB_ID.cov"; done
  artifacts:
    when: always
    paths:
      - deps/ext.jl
      - deps/deps.jl
      - deps/build.log
      # gitlab-runner#2620
      - src/*.cov
      - src/*/*.cov
      - src/*/*/*.cov


#
# coverage
#

.coverage:
  stage: post
  script:
    - julia --color=yes -e 'using Pkg;
                            Pkg.instantiate();
                            Pkg.add("Coverage")'
    - julia --color=yes -e 'using Coverage;
                            Codecov.submit_local(process_folder(), ".")'


#
# documentation
#

# NOTE: the recommended set-up is to develop the main package from the docs environment,
#       but that ignores the package's Manifest. instead, we instantiate and activate both
#       by setting the load path, giving priority to the main package Manifest.

.documentation:
  stage: post
  variables:
    DOCUMENTER_DEBUG: "true"
    JULIA_LOAD_PATH: "$CI_PROJECT_DIR:$CI_PROJECT_DIR/docs::"
  script:
    - apt-get -qq -o=Dpkg::Use-Pty=0 -y install git
    - julia --project --color=yes -e 'using Pkg;
                                      Pkg.instantiate()'
    - julia --project=docs/ --color=yes -e 'using Pkg;
                                            Pkg.instantiate()'
    - julia --project=docs/ --color=yes docs/make.jl
  artifacts:
    paths:
    - docs/build
