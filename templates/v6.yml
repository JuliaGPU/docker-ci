stages:
  - build
  - test
  - post
  - deploy

cache:
  key: ${CI_JOB_NAME}
  paths:
    - downloads
    # package downloads
    - deps/usr/downloads
    # global downloads and artifacts
    - .julia/packages/**/deps/usr/downloads
    - .julia/artifacts
    # julia source build dependency cache
    - julia/deps/srccache
    - julia/deps/srccache/*.tar.gz

.install:
  before_script:
    - |
      apt-get -qq update
      apt-get -qqy install curl
      case "$CI_RUNNER_EXECUTABLE_ARCH" in
        "linux/amd64")
          larch="x64"
          rarch="x86_64"
          nightly_rarch="64"
          ;;
        "linux/arm64")
          larch="aarch64"
          rarch="aarch64"
          nightly_rarch="aarch64"
          ;;
        *)
          echo "Unsupported platform: $CI_RUNNER_EXECUTABLE_ARCH" >&2
          exit 1
          ;;
      esac
      if [[ "$JULIA_VERSION" == "nightly" ]]; then
        url="https://julialangnightlies-s3.julialang.org/bin/linux/$larch/julia-latest-linux$nightly_rarch.tar.gz"
      else
        url="https://julialang-s3.julialang.org/bin/linux/$larch/$JULIA_VERSION/julia-$JULIA_VERSION-latest-linux-$rarch.tar.gz"
      fi
      curl -L "$url" | tar -C /usr/local --strip-components=1 -zxf -
      julia -e 'using InteractiveUtils; versioninfo()'
      JULIA_LLVM_ARGS='--version' julia
      # https://gitlab.com/gitlab-org/gitlab-runner/issues/327
      # https://gitlab.com/gitlab-org/gitlab/issues/16343
      export JULIA_DEPOT_PATH="$CI_PROJECT_DIR/.julia"


#
# Julia versions
#

.julia:1.0:
  variables:
    JULIA_VERSION: 1.0
  extends: .install

.julia:1.1:
  variables:
    JULIA_VERSION: 1.1
  extends: .install

.julia:1.2:
  variables:
    JULIA_VERSION: 1.2
  extends: .install

.julia:1.3:
  variables:
    JULIA_VERSION: 1.3
  extends: .install

.julia:1.4:
  variables:
    JULIA_VERSION: 1.4
  extends: .install

.julia:1.5:
  variables:
    JULIA_VERSION: 1.5
  extends: .install

.julia:nightly:
  variables:
    JULIA_VERSION: nightly
  extends: .install

.julia:source:
  before_script:
    - |
      apt-get -qq update
      apt-get -qq -o=Dpkg::Use-Pty=0 -y install git build-essential libatomic1 python gfortran perl wget m4 cmake pkg-config rsync
      # clone to a different folder because julia/deps/srccache might exist already
      git clone $CI_CLONE_ARGS https://github.com/JuliaLang/julia julia.git
      rsync -a julia.git/ julia/
      # build
      make -C julia -j$(nproc) JULIA_PRECOMPILE=0 $CI_BUILD_ARGS
      ln -s $(pwd)/julia/julia /usr/local/bin/julia
      julia -e 'using InteractiveUtils; versioninfo()'
      JULIA_LLVM_ARGS='--version' julia
      # https://gitlab.com/gitlab-org/gitlab-runner/issues/327
      # https://gitlab.com/gitlab-org/gitlab/issues/16343
      export JULIA_DEPOT_PATH="$CI_PROJECT_DIR/.julia"


#
# test
#

.test:
  stage: test
  script:
    - julia --project --color=yes -e 'using Pkg;
                                      Pkg.instantiate();
                                      Pkg.build();
                                      Pkg.test(; coverage=true);'
  after_script:
    - shopt -s globstar; for f in ./**/*.cov; do mv "$f" "${f%.cov}.$CI_JOB_ID.cov"; done
  artifacts:
    when: always
    paths:
      - deps/ext.jl
      - deps/deps.jl
      - deps/build.log
      # gitlab-runner#2620
      - ./*.cov
      - ./*/*.cov
      - ./*/*/*.cov
      - ./*/*/*/*.cov


#
# coverage
#

.coverage:
  stage: post
  script:
    - julia --color=yes -e 'using Pkg;
                            Pkg.add("Coverage")'
    # Coverage(Tools).jl scans all .jl files but easily fails at that,
    # so make sure we exclude hidden directories (like the depot, .git, ...)
    - julia --color=yes -e 'using Coverage;
                            coverage = vcat(map(process_folder,
                                                filter(entry->isdir(entry) &&
                                                              !startswith(entry, "."),
                                                       readdir(".")))...);
                            Codecov.submit_local(coverage, ".")'


#
# documentation
#

# NOTE: the recommended set-up is to develop the main package from the docs environment,
#       but that ignores the package's Manifest. instead, we instantiate and activate both
#       by setting the load path, giving priority to the main package Manifest.

.documentation:
  stage: post
  variables:
    DOCUMENTER_DEBUG: "true"
    JULIA_LOAD_PATH: "$CI_PROJECT_DIR:$CI_PROJECT_DIR/docs::"
  script:
    - apt-get -qq -o=Dpkg::Use-Pty=0 -y install git
    - julia --project --color=yes -e 'using Pkg;
                                      Pkg.instantiate()'
    - julia --project=docs/ --color=yes -e 'using Pkg;
                                            Pkg.instantiate()'
    - julia --project=docs/ --color=yes docs/make.jl
  artifacts:
    paths:
    - docs/build
